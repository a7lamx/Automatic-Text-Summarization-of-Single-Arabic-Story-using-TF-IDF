import pandas as pd
import seaborn as sns
import matplotlib as pl
import nltk
from nltk import sent_tokenize

with open('C:\\Users\\anwaa\\Desktop\\second semester\\NLP\\project\\artical.txt','r',encoding='utf-8') as f:
    lines = f.readlines()
r_lines=lines
data = "".join([line.strip()for line in r_lines])
print(data)
TF-IDF from scratch
sentences = sent_tokenize(data) # NLTK function
total_documents = len(sentences)
print(sentences)

Calculate the presence of each word in each sentences
def _create_frequency_matrix(sentences):
    frequency_matrix = {}
    stopWords = set(stopwords.words("Arabic"))
    ps = PorterStemmer()

    for sent in sentences:
        freq_table = {}
        words = word_tokenize(sent)
        for word in words:
            word = ps.stem(word)
            if word in stopWords:
                continue

            if word in freq_table:
                freq_table[word] += 1
            else:
                freq_table[word] = 1

        frequency_mrix[sent[:15]] = freq_table

    return frequency_matrix

claculate TF by divide freq of word over total number of words in the sentence
def _create_tf_matrix(freq_matrix):
    tf_matrix = {}

    for sent, f_table in freq_matrix.items():
        tf_table = {}

        count_words_in_sentence = len(f_table)
        for word, count in f_table.items():
            tf_table[word] = count / count_words_in_sentence

        tf_matrix[sent] = tf_table

    return tf_matrix

Calculate the presence of each word in all sentences/docu
def _create_documents_per_words(freq_matrix):
    word_per_doc_table = {}

    for sent, f_table in freq_matrix.items():
        for word, count in f_table.items():
            if word in word_per_doc_table:
                word_per_doc_table[word] += 1
            else:
                word_per_doc_table[word] = 1

    return word_per_doc_table


calculate numb of sentences/docu over numb of sent containg word
def _create_idf_matrix(freq_matrix, count_doc_per_words, total_documents):
    idf_matrix = {}

    for sent, f_table in freq_matrix.items():
        idf_table = {}

        for word in f_table.keys():
            idf_table[word] = math.log10(total_documents / float(count_doc_per_words[word]))

        idf_matrix[sent] = idf_table

    return idf_matrix

calculate TF-IDF by mult TF * IDF
def _create_tf_idf_matrix(tf_matrix, idf_matrix):
    tf_idf_matrix = {}

    for (sent1, f_table1), (sent2, f_table2) in zip(tf_matrix.items(), idf_matrix.items()):

        tf_idf_table = {}

        for (word1, value1), (word2, value2) in zip(f_table1.items(),
                                                    f_table2.items()):  # here, keys are the same in both the table
            tf_idf_table[word1] = float(value1 * value2)

        tf_idf_matrix[sent1] = tf_idf_table

    return tf_idf_matrix

Calculate sentence scores as the average of the tf-idf value of words in the sentence and it is Calculate by dividing the Total tf-idf of words in the sentence over the Number of distinct words in the sentence
def _score_sentences(tf_idf_matrix) -> dict:
  

    sentenceValue = {}

    for sent, f_table in tf_idf_matrix.items():
        total_score_per_sentence = 0

        count_words_in_sentence = len(f_table)
        for word, score in f_table.items():
            total_score_per_sentence += score

        sentenceValue[sent] = total_score_per_sentence / count_words_in_sentence

    return sentenceValue

A threshold is the average value of the scores of the sentences calculated by dividing the total sum of scores of sentences over the Number of sentences
def _find_average_score(sentenceValue) -> int: #threshold 
  
    #Find the average score from the sentence value dictionary
  
    sumValues = 0
    for entry in sentenceValue:
        sumValues += sentenceValue[entry]

    # Average value of a sentence from original summary_text
    average = (sumValues / len(sentenceValue))

    return average

Generate a summary by extracting the sentences having scores greater than the threshold value.
def _generate_summary(sentences, sentenceValue, threshold):
    sentence_count = 0
    summary = ''

    for sentence in sentences:
        if sentence[:15] in sentenceValue and sentenceValue[sentence[:15]] >= (threshold):
            summary += "  " + sentence
            sentence_count += 1
       

    return summary

import math

from nltk import sent_tokenize, word_tokenize, PorterStemmer
from nltk.corpus import stopwords    
    

# 1 Sentence Tokenize
sentences = sent_tokenize(data)
total_documents = len(sentences)
#print(sentences)

# 2 Create the Frequency matrix of the words in each sentence.
freq_matrix = _create_frequency_matrix(sentences)



#Term frequency (TF) is how often a word appears in a document, divided by how many words are there in a document.

# 3 Calculate TermFrequency and generate a matrix
tf_matrix = _create_tf_matrix(freq_matrix)


# 4 creating table for documents per words
count_doc_per_words = _create_documents_per_words(freq_matrix)



#Inverse document frequency (IDF) is how unique or rare a word is.

# 5 Calculate IDF and generate a matrix
idf_matrix = _create_idf_matrix(freq_matrix, count_doc_per_words, total_documents)


# 6 Calculate TF-IDF and generate a matrix
tf_idf_matrix = _create_tf_idf_matrix(tf_matrix, idf_matrix)


# 7 Important Algorithm: score the sentences
sentence_scores = _score_sentences(tf_idf_matrix)


# 8 Find the threshold
threshold = _find_average_score(sentence_scores)


# 9 Important Algorithm: Generate the summary
summary = _generate_summary(sentences, sentence_scores, 0.6*threshold)
print(summary)

print(freq_matrix)

print(tf_matrix)

print(count_doc_per_words)

print(idf_matrix)

print(tf_idf_matrix)

print(sentence_scores)

print("threshold",threshold)

sentences = sent_tokenize(summary)
total_documents = len(sentences)
print(total_documents)

with open('C:\\Users\\anwaa\\Desktop\\system summary TF-IDF fron scratch.txt','r',encoding='utf-8') as f:
    lines = f.readlines()
r_lines=lines
system_summary1 = "".join([line.strip()for line in r_lines])
print(system_summary1)
with open('C:\\Users\\anwaa\\Desktop\\summary1.txt','r',encoding='utf-8') as f:
    lines = f.readlines()
r_lines=lines
summary_1 = "".join([line.strip()for line in r_lines])
print(summary_1)

Evaluate the summary
from rouge import Rouge 

hypothesis = system_summary1

reference = summary_1
rouge = Rouge()
scores = rouge.get_scores(hypothesis, reference)
print(scores)

TF-IDF using library
sentences = nltk.sent_tokenize(data)
sentences


tokenise words and calculate word frequency by useingTF-IDF
from nltk.tokenize import sent_tokenize, word_tokenize
from nltk.corpus import stopwords
from string import punctuation
#SET STOPWORDS INCLUDING PUNCTUATIONS
stopwords = set(stopwords.words('Arabic') + list(punctuation))
import string
from nltk.stem.isri import ISRIStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
#from nltk.stem.wordnet import WordNetLemmatizer

#def tokenize(data):
    #tokens = nltk.word_tokenize(data)
    #stems = []
    #for item in tokens:
     #   stems.append(WordNetLemmatizer().lemmatize(item))
    #return stems

def tokenize(data):
    tokens = nltk.word_tokenize(data)
    stems = []
    for item in tokens:
        stems.append(ISRIStemmer().stem(item))
    return stems


tfidf = TfidfVectorizer(tokenizer=tokenize, 
                        stop_words=stopwords)
tfs = tfidf.fit_transform([data])

# FREQUENCIES
freqs = {}

feature_names = tfidf.get_feature_names()
for col in tfs.nonzero()[1]:
    freqs[feature_names[col]] = tfs[0, col]
def tokenize(data):
    tokens = nltk.word_tokenize(data)
    stems = []
    for item in tokens:
        stems.append(ISRIStemmer().stem(item))
    return stems
print(tokenize(data))
calculate which are the most important sentences based on the presence of important words on them
from collections import defaultdict

important_sentences = defaultdict(int)

for i, sentence in enumerate(sentences):
    for token in word_tokenize(sentence):
        if token in freqs:
            important_sentences[i] += freqs[token]
print(important_sentences)

summarize with 50% of the original number of sentences = 18 so, the summary will contain 9 sentences.
from heapq import nlargest
import operator

# Choose 50% of the text to show
number_sentences = int(len(sentences) * 0.50)

# Create an index with the most important sentences
index_important_sentences = nlargest(number_sentences,  
                                   important_sentences, 
                                   important_sentences.get)

    
# Create summary
print('\nSumary:\n')
for i in sorted(index_important_sentences):
    print(sentences[i])
Evaluate the summary
from rouge import Rouge 

hypothesis = system_summary2

reference = summary_1
rouge = Rouge()
scores = rouge.get_scores(hypothesis, reference)


